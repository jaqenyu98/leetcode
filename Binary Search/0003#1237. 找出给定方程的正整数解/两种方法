/*
 * // This is the custom function interface.
 * // You should not implement it, or speculate about its implementation
 * class CustomFunction {
 * public:
 *     // Returns f(x, y) for any given positive integers x and y.
 *     // Note that f(x, y) is increasing with respect to both x and y.
 *     // i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x, y + 1)
 *     int f(int x, int y);
 * };
 */

class Solution {
public:
    vector<vector<int>> findSolution(CustomFunction& customfunction, int z) {
        vector<vector<int>> ans;
        int right = 1000;
        for (int x=1; x<=1000; ++x) {
            int left = 1; //注意left一定要重置为1
            while (left<=right) {
                int y = left + (right - left >> 1);
                if (customfunction.f(x, y)==z) {               
                    ans.push_back({x, y});
                    right = y; //这样xy的单调递增特性都可以被利用了，大大减少了时间
                    break;
                } else if(customfunction.f(x, y)>z) {
                    right = y - 1;
                } else if(customfunction.f(x, y)<z) {
                    left = y + 1;
                }
            }
        }
        return ans;
    }
};
//二分查找法

class Solution {
public:
    vector<vector<int>> findSolution(CustomFunction& customfunction, int z) {
        vector<vector<int>> ans;
        for (int x = 1; x <= 1000; ++x) {
            for (int y = 1; y <= 1000; ++y) {
                if (customfunction.f(x, y) == z) {
                    vector<int> tmp;
                    tmp.emplace_back(x);
                    tmp.emplace_back(y);
                    ans.emplace_back(tmp);
                    break;
                }
            }
        }
        return ans;
    }
};
//暴力法
