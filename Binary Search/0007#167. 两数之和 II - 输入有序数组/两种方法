class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> ans;
        int left = 0, right = numbers.size() - 1;
        while (left<right) {
            if (numbers[left]+numbers[right]==target) {
                return vector<int>{left+1, right+1};
            } else if (numbers[left]+numbers[right]>target) {
                --right;
            } else {
                ++left;
            }
        }
        return vector<int>{};
    }
};
//双指针法O(n) 妙啊

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> ans;
        for (int i = 0; i < numbers.size(); ++i) {
            int diff = target - numbers[i];
            if (diff < numbers[i + 1]) return ans;
            int left = i + 1, right = numbers.size() - 1;
            while (left <= right) {
                int mid = left + ((right - left) >> 1);
                if (numbers[mid] == diff) {
                    ans.emplace_back(i + 1);
                    ans.emplace_back(mid + 1);
                    return ans;
                }
                else if (numbers[mid] > diff) {
                    right = mid - 1;
                }
                else {
                    left = mid + 1;
                }
            }
        }
        return ans;
    }
};
//二分查找法O(nlogn)
