/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 class Solution {
public:
    ListNode* getIntersectionNode(ListNode* headA, ListNode* headB) {
        auto p1 = headA;
        while (p1) {
            auto p2 = headB;
            while (p2) {
                if (p1 == p2)
                    return p2;
                p2 = p2->next;
            }
            p1 = p1->next;
        }
        return nullptr;
    }
};
//双循环法 注意是引用相同才相交

class Solution {
public:
    ListNode* getIntersectionNode(ListNode* headA, ListNode* headB) {
        auto p1 = headA;
        auto p2 = headB;
        while (p1 != p2) {
            if (p1 != nullptr)
                p1 = p1->next;
            else p1 = headB;
            if (p2 != nullptr)
                p2 = p2->next;
            else p2 = headA;
        }
        return p1;
    }
};
//双指针相遇法 妙啊

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        unordered_set<ListNode*> uset; //注意集合中存的是ListNode*类型的变量，因为引用相同才算相交
        auto p1 = headA;
        auto p2 = headB;
        while (p1) {
            uset.emplace(p1); //每次存的都是指针p1，其实是将p1指向的对象的地址存了下来
            p1 = p1->next;
        }
        while (p2) {
            if (uset.count(p2))
                return p2;
            else uset.emplace(p2);
            p2 = p2->next;
        }
        return nullptr;
    }
};
//集合法
