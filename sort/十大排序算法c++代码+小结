#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

//---------------------------------------冒泡排序-------------------------------------------
//比较次数：n*(n-1)/2次，交换次数：n*(n-1)/2， 赋值次数（1次交换=3次赋值）：3*n*(n-1)/2
void BubbleSort(vector<int>& nums) {
    for (int i = 0; i < nums.size(); ++i) {
        for (int j = 0; j < nums.size() - i - 1; ++j) {
            if (nums[j] > nums[j + 1])
                swap(nums[j], nums[j + 1]);
        }
    }
}
//---------------------------------------选择排序----------------------------------------------
//比较次数：n*(n-1)/2次，交换次数：n， 赋值次数（1次交换=3次赋值）：n+n*(n-1)/2+3*n
void SelectSort(vector<int>& nums) {
    for (int i = 0; i < nums.size(); ++i) {
        int min_index = i;
        for (int j = i; j < nums.size(); ++j) {
            if (nums[j] < nums[min_index])
                min_index = j;
        }
        swap(nums[i], nums[min_index]);
    }
}
//---------------------------------------插入排序-----------------------------------------------
//比较次数：n*(n-1)/4次（概率学平均下来），交换次数0，赋值次数：2*n+n*(n-1)/4+n
//综上，实际速度：插入排序>选择排序>冒泡排序。
void InsertionSort(vector<int>& nums) {
    for (int i = 1; i < nums.size(); ++i) {
        int tmp = nums[i];
        int j = i - 1;
        while (j >= 0 && tmp < nums[j]) {
            nums[j + 1] = nums[j];
            --j;
        }
        nums[j + 1] = tmp;
    }
}
//-------------------------------希尔排序（插入排序的优化）--------------------------------------
void ShellSort(vector<int>& nums) {
    int gap = 1;
    while (gap <= nums.size() / 3) {
        gap = 3 * gap + 1; //这里取增量gap为3*gap+1，时间复杂度为O(n^1.5)
    }
    while (gap > 0) {
        //里面就是插入排序，只是插入排序的gap=1而已
        for (int i = gap; i < nums.size(); ++i) {
            int tmp = nums[i];
            int j = i - gap;
            while (j >= 0 && tmp < nums[j]) {
                nums[j + gap] = nums[j];
                j -= gap;
            }
            nums[j + gap] = tmp;
        }
        gap /= 3;
    }
}
//----------------------------------------归并排序-------------------------------------------------
//归并的实现(该函数仅合并，不分解）
void Merge(vector<int>& nums, vector<int>& tmp, int left, int mid, int right) {
    tmp = nums;
    int l = left, r = mid + 1, cur = left;
    while (l <= mid || r <= right) {
        if (l > mid) {
            nums[cur++] = tmp[r++];
        }
        else if (r > right) {
            nums[cur++] = tmp[l++];
        }
        else if (tmp[l] > tmp[r]) {
            nums[cur++] = tmp[r++];
        }
        else {
            nums[cur++] = tmp[l++];
        }
    }
}
//归并排序真正实现：分解+归并
void DivideMerge(vector<int>& nums, vector<int>& tmp, int left, int right) {
    if (right <= left)
        return;
    int mid = left + (right - left) / 2;
    //先分解
    DivideMerge(nums, tmp, left, mid);
    DivideMerge(nums, tmp, mid + 1, right);
    //再归并
    Merge(nums, tmp, left, mid, right);
}
//归并排序接口（递归实现）
void MergeSort(vector<int>& nums) {
    int length = nums.size();
    vector<int> tmp(length);
    DivideMerge(nums, tmp, 0, length - 1);
}
//---------------------------------------快速排序之三分取中法------------------------------------------------
//平均时间复杂度为O(nlogn)，最差情况为O(n^2)
//pivot的选取用三分取中法，这个方法能减少时间复杂度变为O(n^2)的概率。
void QuickSort(vector<int>& nums, int left, int right) {
    //如果只有1个数，直接return
    if (right <= left)
        return;

    //用三分取值法得到pivot
    int mid = left + (right - left) / 2;
    //让nums[left]<=nums[mid]<=nums[right]
    //注意处理顺序，先处理left，让它是最小的，然后才处理mid和right
    if (nums[left] > nums[mid])
        swap(nums[left], nums[mid]);
    if (nums[left] > nums[right])
        swap(nums[left], nums[right]);
    if (nums[mid] > nums[right])
        swap(nums[mid], nums[right]);
    //将pivot移动到right-1的位置
    swap(nums[mid], nums[right - 1]);

    //如果有两个或三个数，已经排好序了，直接return
    if (right - left <= 2)
        return;

    //双边扫描，我的这种实现，l位置是最终的pivot_index
    //选取要开始扫描的元素的前一个元素为l和r的初始值，因为后面是++l和--r。即我们是从left+1和right-2开始扫描的。
    int l = left;
    int r = right - 1;
    int pivot = nums[right - 1];
    while (true) {
        //遇到相等的一定要交换，否则pivot会偏向一边，时间复杂度会趋近于n^2
        //无需检查边数组下标越界，因为两边有兜底的（nums[left]和nums[right]）
        while (nums[++l] < pivot) {}
        while (nums[--r] > pivot) {}
        if (l < r) {
            swap(nums[l], nums[r]);
        }
        else {
            //退出循环的条件为r在l左边，此时l为pivot_index
            swap(nums[right - 1], nums[l]);
            break;
        }
    }

    //经过一番操作，l是pivot_index，继续递归。
    QuickSort(nums, left, l - 1);
    QuickSort(nums, l + 1, right);
}
void QuickSort(vector<int>& nums) {
    QuickSort(nums, 0, nums.size() - 1);
}
//---------------------------------------快速排序之取末尾值法---------------------------------------
//pivot选为末尾元素，容易出现最差情况O(n^2)
void QSort(vector<int>& nums, int left, int right) {
    if (right <= left)
        return;
    //选取要开始扫描的元素的前一个元素为l和r的初始值，因为后面是++l和--r。即我们是从left和right-1开始扫描的。
    int l = left - 1;
    int r = right;
    int pivot = nums[right];
    while (true) {
        while (nums[++l] < pivot) {}
        //注意处理边界
        while (r > left && nums[--r] > pivot) {}
        if (l < r) {
            swap(nums[l], nums[r]);
        }
        else {
            swap(nums[right], nums[l]);
            break;
        }
    }
    QSort(nums, left, l - 1);
    QSort(nums, l + 1, right);
}
void QSort(vector<int>& nums) {
    QSort(nums, 0, nums.size() - 1);
}
//-------------------------------------------------堆排序---------------------------------------------
//堆排序：时间复杂度O(nlogn)，n个数排序，每个数下沉logn次。
//一个数组其实一上来就是一个二叉树，只不过我们需要把它adjust为我们所需要的最大堆形式的二叉树
void AdjustMaxHeap(vector<int>& nums, int cur, int len) {
    int left_child = 2 * cur + 1;
    int right_child = 2 * cur + 2;
    int max_index = cur;
    //如果有右子节点，那么其index应该小于len。
    //比较cur和右子节点，max指向大的那个。
    if (right_child < len && nums[right_child]>nums[cur])
        max_index = right_child;
    if (left_child < len && nums[left_child] > nums[max_index])
        max_index = left_child;
    //若cur不是最大的，则调换位置，并对换下来的元素再进行一次下沉操作
    if (max_index != cur) {
        swap(nums[max_index], nums[cur]);
        AdjustMaxHeap(nums, max_index, len);
    }
}
//最大堆是升序，最小堆是降序
void HeapSort(vector<int>& nums) {
    int len = nums.size();
    //构建最大堆
    //先选取树的最后一个非叶节点，然后遍历树的每个非叶节点，进行下沉操作
    for (int i = len / 2 - 1; i >= 0; --i) {
        AdjustMaxHeap(nums, i, len);
    }
    //进行排序
    //将nums[1]处理完之后，nums[0]自然也就是最小的了，不用管了
    for (int i = len - 1; i >= 1; --i) {
        swap(nums[0], nums[i]);
        AdjustMaxHeap(nums, 0, i);
    }
}
//---------------------------------------------计数排序---------------------------------------------
//时间复杂度O(n+m),m为nums最大值和最小值的差加上1， 空间复杂度O(m)。
//该算法是典型的用空间换时间的算法，速度很快，但较为耗费空间。
//缺点：如果一组数是{0, 100, 1000}, 就必须开一个大小为1001的数组，很耗费空间
void CountingSort(vector<int>& nums) {
    //找出数组中的最大值和最小值
    //最小值作为偏移量使用，有两大作用：
    //①如果数据中有负数，减去min后就会变成非负数，这样就可以存于数组中了。
    //②减少空间开销：比如一组数是{90,91,92}，我们只需要开一个size为3的数组即可。
    int max_value = nums[0], min_value = nums[0];
    for (int i = 1; i < nums.size(); i++) {
        max_value = max(max_value, nums[i]);
        min_value = min(min_value, nums[i]);
    }
    //初始化计数数组
    vector<int> counts(max_value - min_value + 1, 0);

    //计数
    for (int i = 0; i < nums.size(); i++) {
        counts[nums[i] - min_value]++;
    }

    //排序
    int counts_index = 0, nums_index = 0;
    while (counts_index < counts.size()) {
        if (counts[counts_index] > 0) {
            nums[nums_index] = counts_index + min_value;
            ++nums_index;
            --counts[counts_index];
        }
        else {
            ++counts_index;
        }
    }
}
//-----------------------------------------------桶排序--------------------------------------------------
//时间复杂度：O(n+c*slogs), c为桶的个数bucket_count,s为桶的大小bucket_size,关系为n=c*s。 空间复杂度O(n+c)
//计数排序其实就是bucket_size为1的桶排序。
//bucket_size需人为指定，比如有10G的数据，但我内存只有4G，我就可以让bucket_size为4G，每次处理4G的数据，最后合到一起。
void BucketSort(vector<int>& nums, int bucket_size) {
    int max_value = nums[0], min_value = nums[0];
    for (int x : nums) {
        max_value = max(max_value, x);
        min_value = min(min_value, x);
    }
    //这是bucket_count和bucket_size的具体的关系式，实际为（max-min）/bucket_size的向上取整，这里表示为加1
    int bucket_count = (max_value - min_value) / bucket_size + 1;
    //桶用二维vector来实现
    vector<vector<int>> buckets(bucket_count);
    //入桶
    for (int x : nums) {
        //减去最小值，防止负数
        buckets[(x - min_value) / bucket_size].push_back(x);
    }
    int nums_index = 0;
    for (int i = 0; i < bucket_count; ++i) {
        //桶内数据我们用c++自带的sort来排序
        sort(buckets[i].begin(), buckets[i].end());
        //更新到原数组中
        for (int j = 0; j < buckets[i].size(); ++j) {
            nums[nums_index++] = buckets[i][j];
        }
    }
}
//----------------------------------------------基数排序-----------------------------------------------------
//时间复杂度：O(dn),d为常数,即O(n)； 空间复杂度：O(n+10), 即O(n)
//与计数排序、桶排序一样，基数排序也是用空间换时间的排序算法
void RadixSort(vector<int>& nums) {
    int max_value = nums[0];
    for (int x : nums) {
        max_value = max(max_value, x);
    }
    //最大值的位数，用log10来计算
    int max_digits = log10(max_value) + 1;
    //用来获得每一位数字的辅助变量
    int mod = 10, div = 1;
    //依然用二维vector来实现桶
    vector<vector<int>> buckets(10);
    for (int i = 0; i < max_digits; ++i, mod *= 10, div *= 10) {
        for (int j = 0; j < nums.size(); ++j) {
            int digit = (nums[j] % mod) / div;
            buckets[digit].push_back(nums[j]);
        }
        int nums_index = 0;
        //注意这里要用auto&传引用，否则后面的clear函数不会生效
        for (auto& bucket : buckets) {
            for (int x : bucket) {
                nums[nums_index++] = x;
            }
            //要在这里clear，不要在最后clear，否则连那10个空桶也没了。
            bucket.clear();
        }
    }
}
